# Generated by Django 4.2.16 on 2025-10-18 11:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('display_name', models.CharField(blank=True, max_length=150, verbose_name='display name')),
                ('is_email_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FrontPermission',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('codename', models.CharField(max_length=120, unique=True)),
            ],
            options={
                'verbose_name': 'Front permission',
                'verbose_name_plural': 'Front permissions',
            },
        ),
        migrations.CreateModel(
            name='Loja',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('nome', models.CharField(max_length=255)),
                ('descricao', models.TextField(blank=True, null=True)),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('dono', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lojas_proprietario', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Loja',
                'verbose_name_plural': 'Lojas',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('permissions', models.ManyToManyField(blank=True, related_name='roles', to='custom_auth.frontpermission')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='Vendedor',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('descricao_loja', models.TextField(blank=True, null=True)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('nome_loja', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendedores', to='custom_auth.loja')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vendedor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vendedor',
                'verbose_name_plural': 'Vendedores',
            },
        ),
        migrations.CreateModel(
            name='UserFrontPermission',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('loja', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='front_perms_rel', to='custom_auth.loja')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='custom_auth.frontpermission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='front_perms_rel', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User front permission',
                'verbose_name_plural': 'User front permissions',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='lojas',
            field=models.ManyToManyField(blank=True, related_name='usuarios', to='custom_auth.loja'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('loja', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roles_rel', to='custom_auth.loja')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_memberships', to='custom_auth.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles_rel', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User role',
                'verbose_name_plural': 'User roles',
                'indexes': [models.Index(fields=['user', 'loja'], name='idx_ur_user_loja')],
            },
        ),
        migrations.AddConstraint(
            model_name='userrole',
            constraint=models.UniqueConstraint(fields=('user', 'role', 'loja'), name='uniq_user_role_per_loja'),
        ),
        migrations.AddIndex(
            model_name='userfrontpermission',
            index=models.Index(fields=['user', 'loja'], name='idx_ufp_user_loja'),
        ),
        migrations.AddConstraint(
            model_name='userfrontpermission',
            constraint=models.UniqueConstraint(fields=('user', 'permission', 'loja'), name='uniq_user_front_perm_per_loja'),
        ),
        migrations.AddConstraint(
            model_name='loja',
            constraint=models.UniqueConstraint(fields=('dono', 'nome'), name='uniq_loja_por_dono_nome'),
        ),
    ]
